from typing import Optional, Any, Dict

class ETLBaseException(Exception):
    """ETL 기본 예외 클래스"""
    
    def __init__(
        self,
        message: str,
        error_code: Optional[str] = None,
        details: Optional[Dict[str, Any]] = None
    ):
        self.message = message
        self.error_code = error_code or self.__class__.__name__
        self.details = details or {}
        super().__init__(self.message)
    
    def to_dict(self) -> Dict[str, Any]:
        """예외 정보를 딕셔너리로 변환"""
        return {
            'error_code': self.error_code,
            'message': self.message,
            'details': self.details,
            'exception_type': self.__class__.__name__
        }

# 데이터베이스 관련 예외
class DatabaseConnectionError(ETLBaseException):
    """데이터베이스 연결 오류"""
    pass

class MongoDBError(ETLBaseException):
    """MongoDB 관련 오류"""
    pass

class OracleDBError(ETLBaseException):
    """Oracle DB 관련 오류"""
    pass

# 데이터 추출 관련 예외
class ExtractionError(ETLBaseException):
    """데이터 추출 오류"""
    pass

class PipelineExecutionError(ExtractionError):
    """Aggregation Pipeline 실행 오류"""
    pass

class DataNotFoundError(ExtractionError):
    """데이터를 찾을 수 없음"""
    pass

# 데이터 변환 관련 예외
class TransformationError(ETLBaseException):
    """데이터 변환 오류"""
    pass

class ValidationError(TransformationError):
    """데이터 검증 실패"""
    pass

class MappingError(TransformationError):
    """데이터 매핑 오류"""
    pass

# 데이터 적재 관련 예외
class LoadingError(ETLBaseException):
    """데이터 적재 오류"""
    pass

class DuplicateKeyError(LoadingError):
    """중복 키 오류"""
    pass

class IntegrityError(LoadingError):
    """데이터 무결성 오류"""
    pass

# Job 관련 예외
class JobError(ETLBaseException):
    """Job 실행 오류"""
    pass

class JobAlreadyRunningError(JobError):
    """이미 실행 중인 Job"""
    pass

class JobTimeoutError(JobError):
    """Job 타임아웃"""
    pass

# 설정 관련 예외
class ConfigurationError(ETLBaseException):
    """설정 오류"""
    pass

class MissingConfigError(ConfigurationError):
    """필수 설정 누락"""
    pass

# 재시도 관련 예외
class RetryableError(ETLBaseException):
    """재시도 가능한 오류"""
    
    def __init__(
        self,
        message: str,
        max_retries: int = 3,
        retry_after: Optional[int] = None,
        **kwargs
    ):
        super().__init__(message, **kwargs)
        self.max_retries = max_retries
        self.retry_after = retry_after

class NonRetryableError(ETLBaseException):
    """재시도 불가능한 오류"""
    pass

# 예외 처리 유틸리티
class ExceptionHandler:
    """예외 처리 헬퍼 클래스"""
    
    @staticmethod
    def is_retryable(exception: Exception) -> bool:
        """재시도 가능한 예외인지 확인"""
        retryable_exceptions = (
            RetryableError,
            DatabaseConnectionError,
            TimeoutError,
        )
        return isinstance(exception, retryable_exceptions)
    
    @staticmethod
    def get_retry_delay(exception: Exception) -> int:
        """재시도 지연 시간 반환"""
        if isinstance(exception, RetryableError):
            return exception.retry_after or 5
        return 5  # 기본값
    
    @staticmethod
    def format_exception(exception: Exception) -> Dict[str, Any]:
        """예외를 포맷팅"""
        if isinstance(exception, ETLBaseException):
            return exception.to_dict()
        
        return {
            'error_code': 'UNKNOWN_ERROR',
            'message': str(exception),
            'exception_type': exception.__class__.__name__,
            'details': {}
        }